@model BerretDecailletBookingGUI.ViewModel.AdvancedSearchVM

@{
    ViewBag.Title = "Index";

}
    <h3>Advanced search</h3>
    @using (Html.BeginForm("AdvancedList", "Rooms", FormMethod.Post))
    {
        <div class="row">
            <div class="col s5">
                <h5>Hotel</h5>
                <div class="row">
                    <div class="col s12 input-field">
                        @Html.TextBoxFor(m => m.Name, new { @class = "validate", @placeholder = "Provide the hotel name you are looking for..." })
                        @Html.LabelFor(m => m.Name)
                    </div>
                </div>
                <p>
                    <label for="checkin">Check-in</label>
                    @Html.Editor("CheckIn", new { htmlAttributes = new { @class = "datepicker" } })
                </p>
                        
                <div class="row">
                    <div class="col s12">
                        <label for="checkout">Check-out</label>
                        @Html.Editor("CheckOut", new { htmlAttributes = new { @class = "datepicker" } })
                    </div>
                </div>
                <div class="row">
                    <div class="col s12 input-field">
                        <select required class="form-control" id="Location" name="Location">
                            <option disabled selected value="">Location</option>
                            @foreach (String location in Model.Locations)
                            {
                                <option value="@location">@location</option>
                            }
                        </select>

                    </div>
                </div>
            </div>
            <div class="col s5 offset-s2">
                <h5>Room</h5>
                <div class="row">
                    <div class="col s12">
                        <p>Type of room</p>
                        <p>
                            <input name="RoomType" value="1" type="radio" id="single" checked/>
                            <label for="single">Single</label>
                        </p>
                        <p>
                            <input name="RoomType" value="2" type="radio" id="double" />
                            <label for="double">Double</label>
                        </p>
                    </div>
                </div>
                <div class="row">
                    <div class="col s12">
                        <p>Options</p>
                        <p>
                            @Html.CheckBoxFor(m => m.HasWifi, htmlAttributes: new { id = "wifi" })
                            @Html.HiddenFor(m => m.HasWifi)
                            @Html.Label("wifi", "WiFi")
                        </p>
                        <p>
                            @Html.CheckBoxFor(m => m.HasParking, htmlAttributes: new { id = "parking" })
                            @Html.HiddenFor(m => m.HasParking)
                            @Html.Label("parking", "Parking")
                        </p>
                        <p>
                            @Html.CheckBoxFor(m => m.HasTV, htmlAttributes: new { id = "tv" })
                            @Html.HiddenFor(m => m.HasTV)
                            @Html.Label("tv", "TV")
                        </p>
                        <p>
                            @Html.CheckBoxFor(m => m.HasHairdryer, htmlAttributes: new { id = "hairdryer" })
                            @Html.HiddenFor(m => m.HasHairdryer)
                            @Html.Label("hairdryer", "Hairdryer")
                        </p>
                    </div>
                </div>
                <div class="row">
                    <div class="col s12">
                        <p>Price range</p>
                        <div id="price-slider"></div>
                        @Html.HiddenFor(m => m.PriceMin)
                        @Html.HiddenFor(m => m.PriceMax, new { @value = 3000})
                    </div>
                </div>
            </div>
        </div>
            <div class="row">
                <button class="col s12 btn waves-effect waves-light" type="submit" name="action">
                    Search
                    <i class="material-icons right">search</i>
                </button>
            </div>
    }

            
            


@section Styles{
    <link href="~/Content/nouislider/nouislider.min.css" rel="stylesheet" type="text/css" />
}

@section scripts{
    
    <script src="~/Scripts/nouislider/nouislider.min.js"></script>
    <script>
        $(document).ready(function () {
            var date = new Date();

            $('select').material_select();

            $('.datepicker').pickadate({
                min: new Date(date.getFullYear(), date.getMonth(), date.getDate()),
                max: new Date(date.getFullYear(), date.getMonth() + 6, date.getDate()),
                today: 'Today',
                clear: 'Clear',
                close: 'Ok',
                closeOnSelect: false // Close upon selecting a date,
            });

            // snippet found https://github.com/amsul/pickadate.js/issues/690 
            // to update automatically when datepicker is modified
            $('.datepicker').on('change', function () {
                if ($(this).attr('id') === 'CheckIn') {
                    $('#CheckOut').pickadate('picker').set('min', $(this).val());
                }
                if ($(this).attr('id') === 'CheckOut') {
                    $('#CheckIn').pickadate('picker').set('max', $(this).val());
                }
            });

            var slider = document.getElementById('price-slider');
            noUiSlider.create(slider, {
                start: [0, 3000],
                connect: true,
                step: 200,
                tooltips:true,
                orientation: 'horizontal', // 'horizontal' or 'vertical'
                range: {
                    'min': 0,
                    'max': @Html.Raw(Model.PriceMax)
                }
            });

            // modify hidden input for min price and max price
            slider.noUiSlider.on('end', function () {
                var values = slider.noUiSlider.get();
                var min = values[0];
                var max = values[1];
                $('#PriceMin').val(min);
                $('#PriceMax').val(max);
            });

            // workaround for checkbox in materialize
            $("input[type='hidden']").each(function (index, element) {
                $(this).appendTo($(element).parent());
            });
        });
    </script>
}